//task 1
#include <stdio.h>
#include <mpi.h>
#include <string.h>

int main(int argc, char* argv[])
{
	int rank, size, tag = 4653; // K214653
	char message[100];
	MPI_Status status;

	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	
	if (rank == 0)
	{
		strcpy(message, "Hello World");
		MPI_Send(message, strlen(message) + 1, MPI_CHAR, 1, tag, MPI_COMM_WORLD);
	}
	else if (rank == 1)
	{
		MPI_Recv(message, 100, MPI_CHAR, 0, tag, MPI_COMM_WORLD, &status);
		printf("Message received: %s\n", message);
	}
	MPI_Finalize();
	return 0;
}

//task 2.1
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <time.h>

#define N 100

int main(int argc, char *argv[]) {
    int rank, size;
    time_t t;
    int num[N] = {0};
    int *arr = NULL, *arr2 = NULL;
    int sum = 0, total_sum = 0;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    srand((unsigned) time(&t));
    if (rank == 0) {
        for (int i = 0; i < N; i++) {
            num[i] = rand() % 100;
            printf("%d\t",num[i]);
    
        }
    }

    arr = (int *)malloc(N / size * sizeof(int));
    MPI_Scatter(num, N / size, MPI_INT, arr, N / size, MPI_INT, 0, MPI_COMM_WORLD);

    for (int i = 0; i < N / size; i++) {
        sum += arr[i];
    }


    if (rank == 0) {
        arr2 = (int *)malloc(size * sizeof(int));
    }
    MPI_Gather(&sum, 1, MPI_INT, arr2, 1, MPI_INT, 0, MPI_COMM_WORLD);


    if (rank == 0) {
        for (int i = 0; i < size; i++) {
            total_sum += arr2[i];
        }
        printf("\nTotal sum of 100 elements = %d\n", total_sum);
    }
    MPI_Finalize();

    return 0;
}
//task 2
#include<stdio.h>
#include<mpi.h>
#include<stdlib.h>
#define N 100
int main(int argc, char* argv[])
{
	int rank, size, i, a[N], sum=0, *total = NULL;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	int aa[N/size];
	if (rank == 0)
	{
		for (i = 0; i < N; i++)
		{
			a[i] = rand() % 100;
			printf("%d\t", a[i]);
		}
	}
	MPI_Scatter(a, N/size, MPI_INT, aa, N/size, MPI_INT, 0, MPI_COMM_WORLD);
	for (i = 0; i < N/size; i++)
	{
		sum = sum + aa[i];
	}
	if (rank == 0){
		total = (int *)malloc(size * sizeof(int));
	}
	MPI_Gather(&sum, 1, MPI_INT, &total, 1, MPI_INT, 0, MPI_COMM_WORLD);
	if (rank == 0)
	{
		int final;
		for(int i=0; i < N/size; i++){
			final += total[i];
			}
		printf("\nSum of all numbers is %d\n", final);
		free(total);
	}
	MPI_Finalize();
	return 0;
}
//task 3
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

int main(int argc, char* argv[])
{
	int rank, size, i, n, * a, * b, * c, * d;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	if (rank == 0)
	{
		printf("Enter the number of elements\n");
		scanf("%d", &n);
	}
	MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);
	a = (int*)malloc(n * sizeof(int));
	b = (int*)malloc(n * sizeof(int));
	c = (int*)malloc(n * sizeof(int));
	d = (int*)malloc(n * sizeof(int));
	if (rank == 0)
	{
		printf("Enter the elements\n");
		for (i = 0; i < n; i++)
			scanf("%d", &a[i]);
	}
	MPI_Scatter(a, 1, MPI_INT, b, 1, MPI_INT, 0, MPI_COMM_WORLD);
	for (i = 0; i < n; i++)
		c[i] = b[i] * b[i];
	MPI_Gather(c, 1, MPI_INT, d, 1, MPI_INT, 0, MPI_COMM_WORLD);
	if (rank == 0)
	{
		printf("The squared elements are\n");
		for (i = 0; i < n; i++)
			printf("%d ", d[i]);
		printf("\n");
	}
	MPI_Finalize();
	return 0;
}
task 4
#include <stdio.h>
#include <mpi.h>
#include <stdlib.h>
#include <time.h>

int main(int argc, char* argv[])
{
	int rank, size, tag = 4653;
	double start, end;
	MPI_Status status;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	start = MPI_Wtime();
	if (rank == 0){
		int a = 1;
		MPI_Send(&a, 1, MPI_INT, 1, tag, MPI_COMM_WORLD);
	}
	else if (rank == 1){
		int b;
		MPI_Recv(&b, 1, MPI_INT, 0, tag, MPI_COMM_WORLD, &status);
		printf("Received %d from process 0\n", b);
	}
	end = MPI_Wtime();
	printf("Time taken by process %d is %f\n", rank, end - start);
	MPI_Finalize();
	return 0;
}
//task 5
#include <stdio.h>
#include <mpi.h>
#include <stdlib.h>
#include <time.h>

int main(int argc, char* argv[])
{
	int rank, size, i, n = 10;
	int* arr = (int*)malloc(n * sizeof(int));
	double start, end;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size); //size = 2
	if (rank == 0)
	{
		printf("Enter %d elements: ", n);
		for (i = 0; i < n; i++)
			scanf("%d", &arr[i]);
		start = MPI_Wtime();
		MPI_Send(arr, n, MPI_INT, 1, 0, MPI_COMM_WORLD);
		end = MPI_Wtime();
		printf("Time taken by processor %d is %f\n", rank, end - start);
	}
	else if (rank == 1)
	{
		MPI_Recv(arr, n, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		printf("Received array is: ");
		for (i = 0; i < n; i++)
			printf("%d ", arr[i]);
		printf("\n");
	}
	MPI_Finalize();
	return 0;
}
//task 6
#include<stdio.h>
#include<mpi.h>

int main(int argc, char* argv[])
{
	int rank, size, fact = 1, i, j, n = 10, fact1 = 1;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);

	if (rank == 0)
	{
		for (i = 1; i <= n; i++)
		{
			fact = fact * i;
			printf("Factorial of %d is %d\n", i, fact);
		}
	}
	MPI_Finalize();
	return 0;
}