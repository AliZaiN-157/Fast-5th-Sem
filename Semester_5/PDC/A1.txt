//Write a program that calculates the sum of elements in an array using parallel for loops.Divide
//the array into chunks and have each thread compute the sum of its assigned chunk.Finally,
//combine the partial sums from all threads to get the total sum.

#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

int main(int argc, char* argv[])
{
	int n = 1000000;
	int* a = (int*)malloc(sizeof(int) * n);
	int i;
	for (i = 0; i < n; i++)
	{
		a[i] = i;
	}
	int sum = 0;
	int chunk = 100;
#pragma omp parallel for num_threads(4) reduction(+:sum)
	for (i = 0; i < n; i++)
	{
		sum += a[i];
	}
	printf("Sum = %d\n", sum);
	return 0;
}

//Write a C program that calculates matrix multiplication on 3x3 matrix using OpenMP with
//dynamic scheduling and reduction.

#include <stdio.h>
#include <omp.h>

int main() {

	int a[3][3], b[3][3], c[3][3], i, j, k, sum = 0;
	printf("Enter the elements of first matrix: \n");
	for (i = 0; i < 3; i++)
		for (j = 0; j < 3; j++)
			scanf("%d", &a[i][j]);
	printf("Enter the elements of second matrix: \n");
	for (i = 0; i < 3; i++)
		for (j = 0; j < 3; j++)
			scanf("%d", &b[i][j]);
	#pragma omp parallel for private(i,j,k) shared(a,b,c) schedule(dynamic) reduction(+:sum)
	for (i = 0; i < 3; i++) {
		printf("Thread %d is executing\n", omp_get_thread_num());
		for (j = 0; j < 3; j++) {
			sum = 0;
			for (k = 0; k < 3; k++)
				sum += a[i][k] * b[k][j];
			c[i][j] = sum;
		}
	}
	printf("Resultant matrix: \n");
	for (i = 0; i < 3; i++) {
		printf("\n");
		for (j = 0; j < 3; j++)
			printf("%d\t", c[i][j]);
	}
	printf("\n");
	return 0;
}

// Perfrom matrix 2x2 multiplication using collapse clause in openmp

#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

int main() {

	int i, j, k;
	int a[2][2], b[2][2], c[2][2];
	
	for (i = 0; i < 2; i++)
		for (j = 0; j < 2; j++)
			scanf("%d", &a[i][j]);
	
	for (i = 0; i < 2; i++)
		for (j = 0; j < 2; j++)
			scanf("%d", &b[i][j]);
	
#pragma omp parallel for collapse(2)
	for (i = 0; i < 2; i++)
		for (j = 0; j < 2; j++) {
			c[i][j] = 0;
			for (k = 0; k < 2; k++)
				c[i][j] += a[i][k] * b[k][j];
		}
	
	printf("Resultant matrix:\n");
	
	for (i = 0; i < 2; i++) {
		for (j = 0; j < 2; j++)
			printf("%d ", c[i][j]);
		printf("\n");
	}
	
	return 0;
}

//Sort a random array of 100 integers using barrier clause with 6 threads.

#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define N 100

int main()
{
	int i, j, temp;
	int a[N];
	for (i = 0; i < N; i++)
	{
		a[i] = rand() % 100;
	}
	printf("Unsorted array: \n");
	for (i = 0; i < N; i++)
	{
		printf("%d ", a[i]);
	}
	printf("\n");
	omp_set_num_threads(6);
	for (i = 0; i < N - 1; i++)
	{
#pragma omp parallel for shared(a) private(j, temp)
		for (j = 0; j < N - i - 1; j++)
		{
			if (a[j] > a[j + 1])
			{
				temp = a[j + 1];
				a[j + 1] = a[j];
				a[j] = temp;
			}
		}
#pragma omp barrier
	}
	printf("Sorted array: \n");
	for (i = 0; i < N; i++)
	{
		printf("%d ", a[i]);
	}
	printf("\n");
	return 0;
}
		

