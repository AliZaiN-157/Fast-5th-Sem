//Write a program in MPI C where a process with rank zero sends a message with a
//tag = your student id.

#include <stdio.h>
#include <mpi.h>
#include <string.h>

int main(int argc, char* argv[])
{
	int rank, size, tag = 0;
	scanf("%d", &tag); //tag = 4653
	char message[100];
	MPI_Status status;

	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	
	if (rank == 0)
	{
		strcpy(message, "Hello World");
		MPI_Send(message, strlen(message) + 1, MPI_CHAR, 1, tag, MPI_COMM_WORLD);
	}
	else if (rank == 1)
	{
		MPI_Recv(message, 100, MPI_CHAR, 0, tag, MPI_COMM_WORLD, &status);
		printf("Message received: %s\n", message);
	}
	MPI_Finalize();
	return 0;
}

//2. Consider the addition of 100 numbers on 4 - processes.Write a program in MPI C using MPI scatter and MPI gather.

#include<stdio.h>
#include<mpi.h>
#include<stdlib.h>

int main(int argc, char* argv[])
{
	int rank, size, i, sum = 0, n = 100, a[100], b[25], c[25], d[25], e[25], sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0, sum5 = 0;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	if (rank == 0)
	{
		for (i = 0; i < n; i++)
		{
			a[i] = rand() % 100;
			printf("%d\t", a[i]);
		}
	}
	MPI_Scatter(a, 25, MPI_INT, b, 25, MPI_INT, 0, MPI_COMM_WORLD);
	for (i = 0; i < 25; i++)
	{
		sum1 = sum1 + b[i];
	}
	printf("\nSum of 1st 25 numbers is %d in process %d\n", sum1, rank);
	MPI_Scatter(a + 25, 25, MPI_INT, c, 25, MPI_INT, 0, MPI_COMM_WORLD);
	for (i = 0; i < 25; i++)
	{
		sum2 = sum2 + c[i];
	}
	printf("\nSum of 2nd 25 numbers is %d in process %d\n", sum2, rank);
	MPI_Scatter(a + 50, 25, MPI_INT, d, 25, MPI_INT, 0, MPI_COMM_WORLD);
	for (i = 0; i < 25; i++)
	{
		sum3 = sum3 + d[i];
	}
	printf("\nSum of 3rd 25 numbers is %d in process %d\n", sum3, rank);
	MPI_Scatter(a + 75, 25, MPI_INT, e, 25, MPI_INT, 0, MPI_COMM_WORLD);
	for (i = 0; i < 25; i++)
	{
		sum4 = sum4 + e[i];
	}
	printf("\nSum of 4th 25 numbers is %d in process %d\n", sum4, rank);
	sum = sum1 + sum2 + sum3 + sum4;
	MPI_Gather(&sum, 1, MPI_INT, &sum5, 1, MPI_INT, 0, MPI_COMM_WORLD);
	if (rank == 0)
	{
		printf("\nSum of all numbers is %d\n", sum5);
	}
	MPI_Finalize();
	return 0;
}

//To illustrate point - to - point communication, we consider the problem of squaring
//numbers in an array.An example of an input sequence is 2, 4, 8, 16........with
//corresponding output sequence 4, 16, 64, 256, ..........

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

int main(int argc, char* argv[])
{
	int rank, size, i, n, * a, * b;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	if (rank == 0)
	{
		printf("Enter the number of elements\n");
		scanf("%d", &n);
		a = (int*)malloc(n * sizeof(int));
		b = (int*)malloc(n * sizeof(int));
		printf("Enter the elements\n");
		for (i = 0; i < n; i++)
			scanf("%d", &a[i]);
	}
	MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);
	if (rank != 0)
	{
		a = (int*)malloc(n * sizeof(int));
		b = (int*)malloc(n * sizeof(int));
	}
	MPI_Bcast(a, n, MPI_INT, 0, MPI_COMM_WORLD);
	for (i = 0; i < n; i++)
		b[i] = a[i] * a[i];
	MPI_Gather(b, n, MPI_INT, b, n, MPI_INT, 0, MPI_COMM_WORLD);
	if (rank == 0)
	{
		printf("The squared elements are\n");
		for (i = 0; i < n; i++)
			printf("%d\t", b[i]);
		printf("\n");
	}
	MPI_Finalize();
	return 0;
}

//Write two programs in MPI C where a process with rank zero sends a message and a
//process with rank 1 receives a message with a tag = your student id.Use
//Blocking send / receive and measure the time MPI_Wtime.

// Student Id = 4653

#include <stdio.h>
#include <mpi.h>
#include <stdlib.h>
#include <time.h>

int main(int argc, char* argv[])
{
	int rank, size, tag = 4653;
	double start, end;
	MPI_Status status;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	start = MPI_Wtime();
	if (rank == 0)
	{
		int a = 10;
		MPI_Send(&a, 1, MPI_INT, 1, tag, MPI_COMM_WORLD);
	}
	else if (rank == 1)
	{
		int b;
		MPI_Recv(&b, 1, MPI_INT, 0, tag, MPI_COMM_WORLD, &status);
		printf("Received %d from process 0\n", b);
	}
	end = MPI_Wtime();
	printf("Time taken by process %d is %f\n", rank, end - start);
	MPI_Finalize();
	return 0;
}

//Write a program in MPI C where 1 processor sends an array of 10 elements and
//processor 2 receives it and measure the time using MPI_Wtime.

#include <stdio.h>
#include <mpi.h>
#include <stdlib.h>
#include <time.h>

int main(int argc, char* argv[])
{
	int rank, size, i, n = 10;
	int* arr = (int*)malloc(n * sizeof(int));
	double start, end;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size); //size = 2
	if (rank == 0)
	{
		printf("Enter %d elements: ", n);
		for (i = 0; i < n; i++)
			scanf("%d", &arr[i]);
		start = MPI_Wtime();
		MPI_Send(arr, n, MPI_INT, 1, 0, MPI_COMM_WORLD);
		end = MPI_Wtime();
		printf("Time taken by processor %d is %f\n", rank, end - start);
	}
	else if (rank == 1)
	{
		MPI_Recv(arr, n, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		printf("Received array is: ");
		for (i = 0; i < n; i++)
			printf("%d ", arr[i]);
		printf("\n");
	}
	MPI_Finalize();
	return 0;
}

//6. Write a program in MPI C to generate factorials up to 10 terms.

#include<stdio.h>
#include<mpi.h>

int main(int argc, char* argv[])
{
	int rank, size, fact = 1, i, j, n = 10, fact1 = 1;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);

	if (rank == 0)
	{
		for (i = 1; i <= n; i++)
		{
			fact = fact * i;
			printf("Factorial of %d is %d\n", i, fact);
		}
	}
	MPI_Finalize();
	return 0;
}

